#+TITLE: DOOM Emacs Config
#+AUTHOR: Jonas Schwind
#+DESCRIPTION: My Doom Emacs config
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t
#+STARTUP: showeverything

* Table of Contents :toc:
- [[#about-this-config][About this config]]
  - [[#requirements][Requirements]]
- [[#splash-screen][Splash screen]]
- [[#beacon][Beacon]]
- [[#identification][Identification]]
- [[#autosave][Autosave]]
- [[#fonts][Fonts]]
- [[#doom-theme][Doom Theme]]
- [[#line-settings][Line Settings]]
- [[#dired][Dired]]
- [[#rainbow-mode][Rainbow Mode]]
- [[#org-mode][Org-Mode]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-fonts][Org Fonts]]
  - [[#org-auto-tangle][Org auto-tangle]]
- [[#package-configuration][Package configuration]]

* About this config
This is my private configuration.
It is supposed to be used in DOOM Emacs
Remember, you do not need to run 'doom sync' after modifying this file!
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

** Requirements
Just put these in your /'packages.el'/
#+begin_example emacs-lisp
(package! writeroom-mode) ;; Distraction free writing
(package! org-auto-tangle) ;; Autotangle on save
(package! beacon) ;; Neve loose cursor
#+end_example

* Splash screen
#+begin_src emacs-lisp
(setq fancy-splash-image (concat doom-user-dir "splash/doom-emacs-dracula-green.png"))
#+end_src

* Beacon
#+begin_src emacs-lisp
(beacon-mode t)
#+end_src

* Identification
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "Jonas Schwind"
      user-mail-address "jonasschwind20021@gmx.de")
#+end_src

* Autosave
#+begin_src emacs-lisp
(setq auto-save-default t make-backup-files t)
#+end_src

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:
+ /doom-font/ -- the primary font to use
+ /doom-variable-pitch-font/ -- a non-monospace font (where applicable)
+ /doom-big-font/ -- used for `doom-big-font-mode'; use this for presentations or streaming.
+ /doom-unicode-font/ -- for unicode glyphs
+ /doom-serif-font/ -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they accept.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "SFMono Nerd Font" :size 12)
      doom-variable-pitch-font (font-spec :family "SFMono Nerd Font" :size 12)
      doom-big-font (font-spec :family "SFMono Nerd Font" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

If you or Emacs can't find your font, use 'M-x describe-font' to look them up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to refresh your font settings.
If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

* Doom Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function.
#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

* Line Settings
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

Automaticaly wrap lengthy lines.
#+begin_src emacs-lisp
(+global-word-wrap-mode +1)
#+end_src

* Dired
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file"           "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do emacs-lisp-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

* Rainbow Mode
Previev color codes
#+begin_src emacs-lisp
(use-package rainbow-mode
:hook (prog-mode . rainbow-mode ))
#+end_src

* Org-Mode
If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp
(map! :leader :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/Documents/org/"
        org-hide-emphasis-markers t
        org-ellipsis " ‚ñº "
        org-superstar-headline-bullets-list '("‚óâ" "‚óè" "‚óã" "‚óÜ" "‚óè" "‚óã" "‚óÜ")
        org-superstar-itembullet-alist '((?+ . ?‚û§) (?- . ?‚ú¶)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-src-fontify-natively t
        org-src-tab-acts-natively t))
#+end_src

** Org Agenda
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files '("~/Documents/org/agenda.org")))

(setq
   org-fancy-priorities-list '("üü•" "üüß" "üü®")
   org-priority-faces
   '((?A :foreground "#ff6c6b" :weight bold)
     (?B :foreground "#50fa7b" :weight bold)
     (?C :foreground "#bd93f9" :weight bold))
   org-agenda-block-separator 8411)

(setq org-agenda-custom-commands
      '(("v" "A better agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (tags "PRIORITY=\"B\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
          (tags "PRIORITY=\"C\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Low-priority unfinished tasks:")))
          (tags "customtag"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Tasks marked with customtag:")))

          (agenda "")
          (alltodo "")))))
#+end_src

** Org Fonts
Set dracula colored header fonts for org-mode
#+begin_src emacs-lisp
(with-eval-after-load 'org-faces
  (dolist
      (face
       '((org-level-1 1.7 "#8be9fd" ultra-bold)
         (org-level-2 1.6 "#bd93f9" extra-bold)
         (org-level-3 1.5 "#50fa7b" bold)
         (org-level-4 1.4 "#ffb86c" semi-bold)
         (org-level-5 1.3 "#8be9fd" normal)
         (org-level-6 1.2 "#bd93f9" normal)
         (org-level-7 1.1 "#50fa7b" normal)
         (org-level-8 1.0 "#ff6c6b" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bd93f9"))
#+end_src

** Org auto-tangle
Automaticaly run org-babel-tangle on save
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config (setq org-auto-tangle-default t))
#+end_src

* Package configuration
Whenever you reconfigure a package, make sure to wrap your config in an `after!' block,
otherwise Doom's defaults may override your settings. E.g.
#+begin_example emacs-lisp
(after! PACKAGE
    (setq x y))
#+end_example

The exceptions to this rule:
+ Setting file/directory variables (like `org-directory')
+ Setting variables which explicitly tell you to set them before their package is loaded (see 'C-h v VARIABLE' to look up their documentation).
+ Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.
+ `load!' for loading external *.el files relative to this one
+ `use-package!' for configuring packages
+ `after!' for running code after a package has loaded
+ `add-load-path!' for adding directories to the `load-path', relative to this file. Emacs searches the `load-path' when you load packages with `require' or `use-package'.
+ `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces, etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.
